package internal

import (
	"bytes"
	"encoding/binary"
	"github.com/stretchr/testify/assert"
	"strings"
	"testing"
)

func getNintendoLogo() []byte {
	return []byte{
		0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B, 0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D,
		0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E, 0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99,
		0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC, 0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E,
	}
}

func getSnakeHeader() []byte {
	return []byte{
		/*0000 : */ 0xC3, 0x00, 0x01, 0x00, /* .... */
		/*0004 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0008 : */ 0xC3, 0x00, 0x01, 0x00, /* .... */
		/*000C : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0010 : */ 0xC3, 0x00, 0x01, 0x00, /* .... */
		/*0014 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0018 : */ 0xC3, 0x00, 0x01, 0x00, /* .... */
		/*001C : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0020 : */ 0xC3, 0x00, 0x01, 0x00, /* .... */
		/*0024 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0028 : */ 0xC3, 0x00, 0x01, 0x00, /* .... */
		/*002C : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0030 : */ 0xC3, 0x00, 0x01, 0x00, /* .... */
		/*0034 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0038 : */ 0xC3, 0x00, 0x01, 0x00, /* .... */
		/*003C : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0040 : */ 0xC3, 0x59, 0x01, 0x00, /* .Y.. */
		/*0044 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0048 : */ 0xD9, 0x00, 0x00, 0x00, /* .... */
		/*004C : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0050 : */ 0xD9, 0x00, 0x00, 0x00, /* .... */
		/*0054 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0058 : */ 0xD9, 0x00, 0x00, 0x00, /* .... */
		/*005C : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0060 : */ 0xD9, 0x00, 0x00, 0x00, /* .... */
		/*0064 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0068 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*006C : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0070 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0074 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0078 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*007C : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0080 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0084 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0088 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*008C : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0090 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0094 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0098 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*009C : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00A0 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00A4 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00A8 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00AC : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00B0 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00B4 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00B8 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00BC : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00C0 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00C4 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00C8 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00CC : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00D0 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00D4 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00D8 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00DC : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00E0 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00E4 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00E8 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00EC : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00F0 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00F4 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00F8 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*00FC : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0100 : */ 0x00, 0xC3, 0x50, 0x01, /* ..P. */
		/*0104 : */ 0xCE, 0xED, 0x66, 0x66, /* ..ff */
		/*0108 : */ 0xCC, 0x0D, 0x00, 0x0B, /* .... */
		/*010C : */ 0x03, 0x73, 0x00, 0x83, /* .s.. */
		/*0110 : */ 0x00, 0x0C, 0x00, 0x0D, /* .... */
		/*0114 : */ 0x00, 0x08, 0x11, 0x1F, /* .... */
		/*0118 : */ 0x88, 0x89, 0x00, 0x0E, /* .... */
		/*011C : */ 0xDC, 0xCC, 0x6E, 0xE6, /* ..n. */
		/*0120 : */ 0xDD, 0xDD, 0xD9, 0x99, /* .... */
		/*0124 : */ 0xBB, 0xBB, 0x67, 0x63, /* ..gc */
		/*0128 : */ 0x6E, 0x0E, 0xEC, 0xCC, /* n... */
		/*012C : */ 0xDD, 0xDC, 0x99, 0x9F, /* .... */
		/*0130 : */ 0xBB, 0xB9, 0x33, 0x3E, /* ..3> */
		/*0134 : */ 0x53, 0x4E, 0x41, 0x4B, /* SNAK */
		/*0138 : */ 0x45, 0x00, 0x00, 0x00, /* E... */
		/*013C : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0140 : */ 0x00, 0x00, 0x00, 0x00, /* .... */
		/*0144 : */ 0x44, 0x48, 0x00, 0x1B, /* DH.. */
		/*0148 : */ 0x00, 0x02, 0x01, 0x33, /* ...3 */
		/*014C : */ 0x03, 0x95, 0xD4, 0x1B, /* .... */
	}
}

func ParseSnakeHeader(t *testing.T) Header {
	header := Header{}
	buf := bytes.NewReader(getSnakeHeader())
	err := binary.Read(buf, binary.BigEndian, &header)
	assert.NoError(t, err)
	return header
}

func TestHeaderParsing(t *testing.T) {
	header := ParseSnakeHeader(t)
	titleAndMore := string(header.Raw.TitleManufacturerCodeCGBFlag[:])
	assert.True(t, strings.HasPrefix(titleAndMore, "SNAKE"))
	assert.Equal(t, getNintendoLogo(), header.Raw.NintendoLogo[:])

	assert.Equal(t, byte(0x1B), header.Raw.CartridgeType)
	assert.Equal(t, "MBC5+RAM+BATTERY", header.CartridgeType())

	assert.Equal(t, byte(0x00), header.Raw.RomSize)
	assert.Equal(t, 2, header.RomSize().NumberOfRomBanks)
}
